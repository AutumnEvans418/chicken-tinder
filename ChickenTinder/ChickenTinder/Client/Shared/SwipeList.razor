@using ChickenTinder.Client.Data
@using ChickenTinder.Shared.Models
@inject ServerConnection server
@inject NavigationManager nav
<div class="tinder">
    <div class="tinder--status">
        <i class="fa-solid fa-heart"></i>
        <i class="fa-solid fa-thumbs-up"></i>
        <i class="fa-solid fa-arrow-rotate-left"></i>
        <i class="fa-solid fa-thumbs-down"></i>
    </div>

    <div class="tinder--cards">

        @foreach (var item in Restaurants)
        {
            <div class="tinder--card">
                <Card Restaurant="@item"></Card>
            </div>
        }
    </div>

    <div class="tinder--buttons">
        <button id="love">      <i class="fa-solid fa-heart"></i></button>
        <button id="like">      <i class="fa-solid fa-thumbs-up"></i></button>
        <button id="dislike">   <i class="fa-solid fa-arrow-rotate-left"></i></button>
        <button id="nope">      <i class="fa-solid fa-thumbs-down"></i></button>
    </div>
</div>

@inject IJSRuntime runtime
@code {

    public List<Restaurant> Restaurants { get; set; } = new List<Restaurant>();
    private SwipeJsInterop interop;
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            interop = new SwipeJsInterop(runtime);
            interop.OnSwiped += OnSwipe;

            if (server.Room == null)
                throw new Exception("room cannot be null");

            server.OnMatch += Matched;
            Restaurants = server.Room?.Restaurants.ToList() ?? new List<Restaurant>();
            StateHasChanged();
        }
        await interop.Start();
    }

    public void Matched(string restaurantId)
    {
        if (server.Room == null)
            throw new Exception("");
        server.Room.WinningRestaurant = server.Room.GetRestaurant(restaurantId) ?? throw new Exception("not found");
        StateHasChanged();
        nav.NavigateTo($"/match/{server.Room.ID}");
        Console.WriteLine("Matched!");
    }

    public async void OnSwipe(object? sender, SwipeDirection action)
    {
        Console.WriteLine("I am being clicked");
        Console.WriteLine(action);
        var restaurant = Restaurants.First();

        Restaurants.Remove(restaurant);

        if (action != SwipeDirection.Down)
        {
            var votes = action switch
            {
                SwipeDirection.Left => 1,
                SwipeDirection.Right => 2,
                SwipeDirection.Up => 3,
                _ => throw new Exception(),
            };
            await server.Like(restaurant.ID, votes);
        }

        if (action == SwipeDirection.Left)
        {
            Restaurants.Add(restaurant);
            StateHasChanged();
        }
    }
}
