@using ChickenTinder.Client.Data
@using ChickenTinder.Shared.Models
@inject IServerConnection server
@inject INavigationManager nav
@implements IDisposable
@inject ISwipeJsInterop interop
<div class="tinder">
    <div class="tinder--status">
        <i class="fa-solid fa-heart"></i>
        <i class="fa-solid fa-thumbs-up"></i>
        <i class="fa-solid fa-arrow-rotate-left"></i>
        <i class="fa-solid fa-thumbs-down"></i>
    </div>

    <div class="tinder--cards">
        @if (Restaurants.Count > 0)
        {
            @foreach (var item in Restaurants)
            {
                <div class="tinder--card" style="transform:none">
                    <Card Restaurant="@item"></Card>
                </div>
            }
        }
        else
        {
            <div>
                <Spinner></Spinner>
            </div>
            <div>Waiting on others...</div>
        }
    </div>

    <div class="tinder--buttons">
        <button id="love">      <i class="fa-solid fa-heart"></i></button>
        <button id="like">      <i class="fa-solid fa-thumbs-up"></i></button>
        <button id="dislike">   <i class="fa-solid fa-arrow-rotate-left"></i></button>
        <button id="nope">      <i class="fa-solid fa-thumbs-down"></i></button>
    </div>
</div>



@inject IJSRuntime runtime
@code {
    [Parameter]
    public int? Id { get; set; }
    [CascadingParameter]
    public Error? Error { get; set; }
    public List<Restaurant> Restaurants { get; set; } = new List<Restaurant>();
    private int listsRemaining = 2;
    private int swipesRemaining;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                interop.OnSwiped += OnSwipe;

                if (!server.HasRoom)
                {
                    if (Id.HasValue)
                    {
                        await server.JoinRoom(Id.Value);
                    }
                }

                if (server.Room == null)
                {
                    nav.NavigateTo("/");
                    return;
                }
                else if (server.Room?.Status == RoomStatus.Matched)
                {
                    Matched();
                    return;
                }
                server.OnMatch += Matched;
                Restaurants = server.Room?.Restaurants.ToList() ?? new List<Restaurant>();
                swipesRemaining = Restaurants.Count;
                Console.WriteLine($"Swipes Remaining: {swipesRemaining}");
                StateHasChanged();
            }
            Console.WriteLine("blazore re-rendered");
            if (interop != null)
                await interop.Start();
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }

    }

    public void Matched()
    {
        try
        {
            if (server.Room == null)
                throw new Exception("room cannot be null");
            StateHasChanged();
            nav.NavigateTo($"/match/{server.Room.ID}");
            Console.WriteLine("Matched!");
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }

    }

    public async void OnSwipe(object? sender, SwipeDirection action)
    {
        try
        {
            Console.WriteLine("I am being clicked");
            Console.WriteLine(action);
            var restaurant = Restaurants.FirstOrDefault();

            if (restaurant == null)
                return;

            Restaurants.Remove(restaurant);

            var votes = action switch
            {
                SwipeDirection.Left => UserAction.Maybe,
                SwipeDirection.Right => UserAction.Like,
                SwipeDirection.Up => UserAction.Love,
                SwipeDirection.Down => UserAction.No,
                _ => throw new Exception("invalid swipe")
            };
            await server.Like(restaurant.ID, votes);

            if (action == SwipeDirection.Left)
            {
                Restaurants.Add(restaurant);

                Console.WriteLine($"{restaurant.Name} added back to list");
            }
            Console.WriteLine($"Restaurant Count: {Restaurants.Count}");
            swipesRemaining--;
            Console.WriteLine($"Swipes Remaining: {swipesRemaining}");
            if (swipesRemaining == 0)
            {
                ResetListCount();
                if (listsRemaining == 0)
                {
                    if (server?.Room != null && server.User != null)
                    {
                        await server.SetPickyUser(server.Room.ID, server.User.Id);
                    }
                }
            }
            if (Restaurants.Count == 0)
            {
                if (server?.Room != null && server.User != null)
                {
                    await server.SetPickyUser(server.Room.ID, server.User.Id);
                }
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }
    }

    private void ResetListCount()
    {
        swipesRemaining = Restaurants.Count;
        listsRemaining--;
        Console.WriteLine($"Swipes Remaining: {listsRemaining}");
    }

    public void Dispose()
    {
        if (this.interop == null)
            return;
        this.interop.OnSwiped -= OnSwipe;
        this.interop.Dispose();

    }
}
