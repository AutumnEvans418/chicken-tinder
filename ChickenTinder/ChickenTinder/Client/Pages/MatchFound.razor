@page "/match/{roomid:int}"
@using ChickenTinder.Client.Data
@using ChickenTinder.Client.Services
@using ChickenTinder.Shared.Models
@inject IServerConnection ServerConnection
@inject INavigationManager NavMan
@inject IInterloopService _interloopService;
@inject IJSRuntime _js;
@inject INavigationManager nav
<HeaderView></HeaderView>
@*<div class="pyro">
  <div class="before"></div>
    <Card Restaurant="Room?.WinningRestaurant" />
  <div class="after"></div>
</div>*@

<div id="confetti"></div>

@if (WinningRestaurant == null)
{
    <Spinner />
}
else
{
    <div class="alert alert-success text-center fa-2xl" role="alert">
        It's a Match! <i class="fa-solid fa-champagne-glasses"></i>
    </div>
    <div class="container text-center">
        <div class="row justify-content-center">
            <div class="col-8">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Restaurant Information</h5>
                        <p class="card-text text-center">
                            <Card Restaurant="WinningRestaurant" />
                        </p>
                    </div>
                </div>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-8">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Let's Go to @RestaurantName.</h5>
                        <h6 class="card-subtitle mb-2 text-muted">Great choice! Now let's do this!</h6>
                        <p class="card-text text-center">
                            @foreach (var match in Matches)
                            {
                                <i class="@GetUserClass(match.User?.Class)"></i>
                                <i class="@GetActionClass(match.Action)"></i>
                            }
                        </p>
                        <button type="button" class="btn" @onclick="GetDirections">Get Directions</button>
                        <button type="button" class="btn" @onclick="GoToYelp">Go to Yelp</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int RoomID { get; set; }
    [CascadingParameter]
    public Error? Error { get; set; }
    private DinningRoom? Room { get; set; }
    private Restaurant? WinningRestaurant { get; set; }
    private string RestaurantName { get; set; } = "";
    public List<Match> Matches { get; set; } = new List<Match>();

    public string GetUserClass(string? classList)
    {
        return classList + " fa-2xl";
    }

    public string GetActionClass(UserAction action)
    {
        return action switch
        {
            UserAction.Like => "fa-solid fa-thumbs-up pe-3",
            UserAction.Maybe => "fa-solid fa-arrow-rotate-left pe-3",
            UserAction.No => string.Empty,
            UserAction.Love => "fa-solid fa-heart pe-3",
            _ => throw new Exception("IMPOSSIBLE")
        };
    }

    protected async override void OnAfterRender(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await _js.InvokeVoidAsync("Fireworks.confetti");
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await _interloopService.SetUserId(ServerConnection.User);
            Room = await ServerConnection.GetRoom(RoomID);
            if (Room != null && Room?.WinningRestaurant != null)
            {
                WinningRestaurant = Room.WinningRestaurant;
                RestaurantName = Room.WinningRestaurant.Name;
                Matches = Room
                    .Matches
                    .Where(p => p.Restaurant?.ID == WinningRestaurant.ID)
                    .ToList();
            }
            if (Room == null)
            {
                var message = Uri.EscapeDataString($"room {RoomID} does not exist");
                this.nav.NavigateTo($"/?message={message}");
                return;
            }

        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }
    }

    private async void GetDirections()
    {
        try
        {
            if (WinningRestaurant == null)
                return;
            await _interloopService.LaunchMaps(WinningRestaurant.Coordinates.Latitude.ToString(),
                                             WinningRestaurant.Coordinates.Longitude.ToString());
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }

    }

    private async void GoToYelp()
    {
        try
        {
            if (WinningRestaurant == null)
                return;
            await _js.InvokeAsync<object>("open", $"https://www.yelp.com/map/{WinningRestaurant.Alias}", "_blank");
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }
    }
}
