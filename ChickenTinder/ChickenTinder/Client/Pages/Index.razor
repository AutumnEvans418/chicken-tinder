@page "/"
@using ChickenTinder.Client.Data
@using ChickenTinder.Client.Services
@inject INavigationManager nav
@inject IServerConnection server;
@inject ILocationService location
@inject IInterloopService interloop
@if (!_isLoading)
{
    <div class="center-all">
        <img src="/icon-192.png" style="margin-top: 20px" />
    </div>
    <h1 class="center-all" style="margin-top: 50px">Chicken Tinder</h1>
    <p class="center-all">Find Single Restaurants Near You</p>

    <div class="footer">
        @if (!string.IsNullOrWhiteSpace(Message))
        {
            <div class="center-all">
                <p style="color:red; margin: 0px">@Message</p>
            </div>
        }
        <div class="center-all">
            @if (!string.IsNullOrWhiteSpace(server.User.Latitude))
            {
                <input @bind-value="@server.User.Location" placeholder="Location" class="textbox" disabled>
            }
            else
            {
                <input value="@server.User.Location" @oninput="e => server.User.Location = e.Value?.ToString()" placeholder="Location" class="textbox">
            }
            <button class="btn btn-small" @onclick="() => location.GetLocationAsync()"><i class="fa-solid fa-location-crosshairs"></i></button>
        </div>

        @if (location.IsRetrievingLocation)
        {
            <div class="center-all">
                <p>Getting your location...</p>
            </div>
        }
        <div class="center-all">
            <p style="margin: 0px">Host or Enter Code</p>
        </div>
        <div class="center-all">
            <input class="textbox" type="number" placeholder="Code" value="@Code" @oninput="e => Code = e.Value?.ToString()" />
        </div>
        <div class="center-bottom">
            @if (server.IsLocationSet || !string.IsNullOrWhiteSpace(Code))
            {
                <button id="start" class="btn" @onclick="Join">@JoinText</button>
            }
            else
            {
                <button id="start" disabled class="btn" @onclick="Join">@JoinText</button>
            }

        </div>
    </div>
}
else
{
    <Spinner />
}


@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    private bool _isLoading = false;
    private string? _code;
    public string? Code
    {
        get => _code; set
        {

            if (!string.IsNullOrWhiteSpace(value))
            {
                JoinText = "Join";
            }
            else
            {
                JoinText = "Host";
            }
            _code = value;
        }
    }
    [SupplyParameterFromQuery(Name = "message")]
    [Parameter]
    public string? Message { get; set; }
    public string JoinText { get; set; } = "Host";

    protected override async Task OnInitializedAsync()
    {
        await interloop.SetUserId(server.User);
        location.OnError = () =>
        {
            StateHasChanged();
        };

        location.OnFound = g =>
        {
            server.User.Longitude = location.GeoCoordinates?.Longitude.ToString();
            server.User.Latitude = location.GeoCoordinates?.Latitude.ToString();
            server.User.Location = $"{server.User.Latitude},{server.User.Longitude}";
            StateHasChanged();
        };
        await location.GetLocationAsync();

    }

    public async void Join()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();
            if (string.IsNullOrWhiteSpace(Code))
            {
                await server.CreateRoom();
            }
            else
            {
                await server.JoinRoom(int.Parse(Code));
            }
            _isLoading = false;
            StateHasChanged();
            if (server.Room == null)
            {
                return;
            }
            //create the room...
            nav.NavigateTo($"/room/{server.Room.ID}");
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }

    }

}
