@page "/room/{Id:int}"
@using ChickenTinder.Client.Services
@using ChickenTinder.Shared.Models

@inject NavigationManager nav
@inject ServerConnection server
@inject InterloopService _shareService;


@if (server.HasRoom)
{
    <h3 class="center-all">Dinning Room Code</h3>
    <h3 class="center-all" style="margin-bottom: 5%;">@server.Room?.ID <btn class="btn btn-small" @onclick="Share"><i class="fa-solid fa-share"></i></btn> </h3>
    @foreach (var user in server.Room?.Users ?? new List<User>())
    {
        <div class="center-all" style="margin: 10px">
            <UserBadge Width="80" IsYou="@(server.User?.Id == user.Id)" ShowName="true" User="user"></UserBadge>
        </div>
    }

    @if (server.IsHost)
    {
        <div class="footer">
            @if (server.Room?.Users.Count > 1 || allowSingle)
            {
                <button class="btn" @onclick="() => server.Start()">Start</button>
            }
            else
            {
                <button disabled class="btn" @onclick="() => server.Start()">Waiting for others...</button>
            }
        </div>
    }
}
else
{
    <Spinner />
}
@code {
    private bool allowSingle =>
#if DEBUG
    true;
#else
    false;
#endif
    public string GetStyle(string color)
    {
        return $"margin-right: 5px; border-radius: 50%; background-color: #{color}; padding: 10px;";
    }


    protected async override Task OnInitializedAsync()
    {
        if (!server.HasRoom)
        {
            if (Id.HasValue)
            {
                await server.JoinRoom(Id.Value);
                StateHasChanged();
            }
        }

        server.OnJoin += UserJoined;
        server.OnLeave += UserLeft;
        server.OnStart += Start;
    }

    public void UserJoined(User user)
    {
        StateHasChanged();
    }

    public void UserLeft(User user)
    {
        StateHasChanged();
    }

    [Parameter]
    public int? Id { get; set; }

    public void Start()
    {
        if (Id == null)
            throw new Exception("room id cannot be null");

        nav.NavigateTo($"/swipe/{Id}");
    }

    private async Task Share()
    {
        if (server.Room is not null)
        {
            await _shareService.ShareUrl(nav.BaseUri + "room/" + server.Room.ID);
        }
    }
}
