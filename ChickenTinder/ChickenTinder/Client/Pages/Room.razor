@page "/room"
@page "/room/{Id:int}"
@page "/room/{Id:int}/join/{UserId}"
@using ChickenTinder.Client.Services
@using ChickenTinder.Shared.Models
@inject NavigationManager nav
@inject ServerConnection server
@inject IJSRuntime runtime
@inject InterloopService _shareService;

@if (server.HasRoom)
{
    <h3 class="center-all">Dinning Room Code</h3>
    <h3 class="center-all" style="margin-bottom: 5%;">@server.Room.ID <btn class="btn btn-small" @onclick="Share"><i class="fa-solid fa-share"></i></btn> </h3>
    @foreach (var user in server.Room.Users)
    {
        <div class="center-all">
            <p style="min-width: 300px;align-content: center; text-align: center; ;padding: 10px; border-radius: 5px; font-size: 20px; background-color: white">
                <i class="@user.Class" style="@GetStyle(user.Color)"></i>
                @user.Name
                @if (server.CurrentUserId == @user.SignalRConnection)
                {
                    <span> (You)</span>
                }
            </p>
        </div>
    }

    @if (server.IsHost)
    {
        <div class="footer">
            <button class="btn" @onclick="() => server.Start()">Start</button>
        </div>
    }
}
@code {

    public string GetStyle(string color)
    {
        return $"margin-right: 5px; border-radius: 50%; background-color: #{color}; padding: 10px";
    }

    protected async override void OnInitialized()
    {
        if (!server.HasRoom)
        {
            if (Id.HasValue)
            {
                await server.JoinRoom(Id.Value);
                StateHasChanged();
            }
        }

        //if (server.HasRoom == false)
        //    throw new Exception("impossible!");

        server.OnJoin += UserJoined;
        server.OnLeave += UserLeft;
        server.OnStart += Start;


        base.OnInitialized();

    }

    public void UserJoined(User user)
    {
        StateHasChanged();
    }

    public void UserLeft(User user)
    {
        StateHasChanged();
    }
    private async Task CopyTextToClipboard()
    {
        await runtime.InvokeVoidAsync("clipboardCopy.copyText", server.Room.ID);
    }
    [Parameter]
    public int? UserId { get; set; }
    [Parameter]
    public int? Id { get; set; }



    public void Start()
    {
        nav.NavigateTo("/swipe");
    }

    private async Task Share()
    {
        if (server.Room is not null)
        {
            await _shareService.ShareUrl(nav.BaseUri + "room/" + server.Room.ID);
        }
    }
}
