@page "/room/{Id:int}"
@using ChickenTinder.Client.Services
@using ChickenTinder.Shared.Models

@inject INavigationManager nav
@inject IServerConnection server
@inject IInterloopService _shareService;


@if (server.HasRoom)
{
    <h3 class="center-all">Dinning Room Code</h3>
    <h3 class="center-all" style="margin-bottom: 5%;">@server.Room?.ID <btn class="btn btn-small" @onclick="Share"><i class="fa-solid fa-share"></i></btn> </h3>
    @foreach (var user in server.Room?.Users ?? new List<User>())
    {
        <div class="center-all" style="margin: 10px">
            <UserBadge Width="80" IsYou="@(server.User?.Id == user.Id)" ShowName="true" User="user"></UserBadge>
        </div>
    }

    @if (server.IsHost && server.User != null)
    {
        <div class="footer">
            @if (server.Room?.Users.Count > 1 || allowSingle)
            {
                <button class="btn" style="width: 80%; margin-left: 10%; margin-right: 10%" @onclick="() => server.Start()">Start</button>
            }
            else
            {
                <button disabled class="btn" style="width: 80%; margin-left: 10%; margin-right: 10%" @onclick="() => server.Start()">Waiting for others...</button>
            }
        </div>
    }
}
else
{
    <Spinner />
}
@code {
    [CascadingParameter]
    public Error? Error { get; set; }
    private bool allowSingle =>
#if DEBUG
    true;
#else
    false;
#endif
    public string GetStyle(string color)
    {
        return $"margin-right: 5px; border-radius: 50%; background-color: #{color}; padding: 10px;";
    }


    protected async override Task OnInitializedAsync()
    {
        try
        {
            if (!server.HasRoom)
            {
                if (Id.HasValue)
                {
                    await _shareService.SetUserId(server.User);
                    await server.JoinRoom(Id.Value);
                    if (server.Room == null)
                    {
                        var message = Uri.EscapeDataString($"room {Id} does not exist");
                        nav.NavigateTo($"/?message={message}");
                        return;
                    }
                    else if (server.Room?.Status == RoomStatus.Swiping)
                    {
                        Start();
                        return;
                    }
                    else if (server.Room?.Status == RoomStatus.Matched)
                    {
                        nav.NavigateTo($"/match/{server.Room.ID}");
                        return;
                    }
                    StateHasChanged();
                }
            }

            server.OnJoin += UserJoined;
            server.OnLeave += UserLeft;
            server.OnStart += Start;
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }
    }

    public void UserJoined(User user)
    {
        StateHasChanged();
    }

    public void UserLeft(User user)
    {
        StateHasChanged();
    }

    [Parameter]
    public int? Id { get; set; }

    public void Start()
    {
        try
        {
            if (Id == null)
                throw new Exception("room id cannot be null");

            nav.NavigateTo($"/swipe/{Id}");
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, true, true);
        }
    }

    private async Task Share()
    {
        try
        {
            if (server.Room is not null)
            {
                await _shareService.ShareUrl(nav.BaseUri + "room/" + server.Room.ID);
            }
        }
        catch (Exception ex)
        {
            Error?.ProcessError(ex, false, false);
        }
    }
}
